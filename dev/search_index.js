var documenterSearchIndex = {"docs":
[{"location":"#CommonDataFormat.jl","page":"Home","title":"CommonDataFormat.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Julia package for reading Common Data Format (CDF) files, widely used in space physics for storing multidimensional data arrays and metadata. See CDFDatasets.jl for a high-level interface.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"CommonDataFormat\")","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using CommonDataFormat\n\n# Load a CDF file\nomni_file = joinpath(pkgdir(CommonDataFormat), \"data/omni_coho1hr_merged_mag_plasma_20240901_v01.cdf\")\nds = CDFDataset(omni_file)","category":"page"},{"location":"#API-Reference","page":"Home","title":"API Reference","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#CommonDataFormat.ADR","page":"Home","title":"CommonDataFormat.ADR","text":"Attribute Descriptor Record (ADR)\n\nContains a description of an attribute in a CDF. There will be one ADR per attribute. The ADRhead field of the ADR contains the file offset of the first ADR.\n\n\n\n\n\n","category":"type"},{"location":"#CommonDataFormat.ADR-Tuple{Vector{UInt8}, Any, Any}","page":"Home","title":"CommonDataFormat.ADR","text":"ADR(buf, offset, RecordSizeType)\n\nLoad an Attribute Descriptor Record from the buffer at the specified position.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataFormat.AEDR","page":"Home","title":"CommonDataFormat.AEDR","text":"AEDR\n\nAttribute g/r Entry Descriptor Record. Describes a global entry (for global attributes) or rVariable entry (for variable attributes).\n\n\n\n\n\n","category":"type"},{"location":"#CommonDataFormat.CDFDataset-Tuple{Any}","page":"Home","title":"CommonDataFormat.CDFDataset","text":"CDFDataset(filename)\n\nLoad a CDF file and return a CDFDataset object.\n\nExample\n\ncdf = CDFDataset(\"data.cdf\")\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataFormat.CDR","page":"Home","title":"CommonDataFormat.CDR","text":"CDF Descriptor Record (CDR) - the main file header record Contains version, encoding, format information, and pointer to GDR\n\n\n\n\n\n","category":"type"},{"location":"#CommonDataFormat.CDR-Tuple{Vector{UInt8}, Any, Any}","page":"Home","title":"CommonDataFormat.CDR","text":"CDR(buffer, pos, FieldSizeT)\n\nLoad a CDF Descriptor Record from the IO stream at the specified offset. This follows the CDF specification for CDR record structure.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataFormat.Epoch","page":"Home","title":"CommonDataFormat.Epoch","text":"Epoch\n\nMilliseconds since Year 0 (01-Jan-0000 00:00:00.000) Represented as a single double.\n\n\n\n\n\n","category":"type"},{"location":"#CommonDataFormat.Epoch16","page":"Home","title":"CommonDataFormat.Epoch16","text":"Epoch16\n\nPicoseconds since Year 0 (01-Jan-0000 00:00:00.000.000.000.000) Represented as two doubles (seconds and picoseconds).\n\n\n\n\n\n","category":"type"},{"location":"#CommonDataFormat.GDR","page":"Home","title":"CommonDataFormat.GDR","text":"Global Descriptor Record (GDR) - contains global information about the CDF file Points to variable and attribute descriptor records\n\n\n\n\n\n","category":"type"},{"location":"#CommonDataFormat.GDR-Tuple{Vector{UInt8}, Any, Any}","page":"Home","title":"CommonDataFormat.GDR","text":"GDR(buffer::Vector{UInt8}, pos, FieldSizeT)\n\nLoad a Global Descriptor Record from the buffer at the specified offset.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataFormat.Header","page":"Home","title":"CommonDataFormat.Header","text":"CDF Record header structure - common to all record types\n\n\n\n\n\n","category":"type"},{"location":"#CommonDataFormat.TT2000","page":"Home","title":"CommonDataFormat.TT2000","text":"TT2000\n\nNanoseconds since J2000 (01-Jan-2000 12:00:00.000.000.000) with leap seconds, represented as an 8-byte integer.\n\n\n\n\n\n","category":"type"},{"location":"#CommonDataFormat.VDR","page":"Home","title":"CommonDataFormat.VDR","text":"Variable Descriptor Record (VDR) - describes a single variable\n\n\n\n\n\n","category":"type"},{"location":"#CommonDataFormat.VDR-Union{Tuple{FieldSizeT}, Tuple{Vector{UInt8}, Any, Type{FieldSizeT}}} where FieldSizeT","page":"Home","title":"CommonDataFormat.VDR","text":"VDR(io::IO, FieldSizeT)\n\nLoad a Variable Descriptor Record from the IO stream at the specified offset.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataFormat.VVR","page":"Home","title":"CommonDataFormat.VVR","text":"Variable Value Record (VVR) - contains actual variable data\n\n\n\n\n\n","category":"type"},{"location":"#CommonDataFormat.VXR","page":"Home","title":"CommonDataFormat.VXR","text":"Variable Index Record (VXR) - contains pointers to variable data records\n\n\n\n\n\n","category":"type"},{"location":"#CommonDataFormat.VXR-Tuple{Vector{UInt8}, Any, Any}","page":"Home","title":"CommonDataFormat.VXR","text":"VXR(source, offset, RecordSizeType)\n\nLoad a Variable Index Record from the source at the specified offset.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataFormat.rVDR-Union{Tuple{FieldSizeT}, Tuple{Vector{UInt8}, Any, Any, Type{FieldSizeT}}} where FieldSizeT","page":"Home","title":"CommonDataFormat.rVDR","text":"rVDR(io::IO, FieldSizeT)\n\nLoad a Variable Descriptor Record from the IO stream at the specified offset.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataFormat.attrib-Tuple{CDFDataset, String}","page":"Home","title":"CommonDataFormat.attrib","text":"attrib(cdf::CDFDataset, attribute_name::String)\n\nRetrieve all entries for a named attribute from the CDF file.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataFormat.attrib-Tuple{CDFDataset}","page":"Home","title":"CommonDataFormat.attrib","text":"attrib(cdf::CDFDataset)\n\nLoad all attributes from the CDF file.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataFormat.attribnames-Tuple{CDFDataset}","page":"Home","title":"CommonDataFormat.attribnames","text":"attribnames(cdf::CDFDataset)\n\nReturn a list of attribute names in the CDF file.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataFormat.decode_cdr_flags-Tuple{Any}","page":"Home","title":"CommonDataFormat.decode_cdr_flags","text":"decode_cdr_flags(flags::UInt32)\n\nDecode the CDR flags field into individual boolean flags.\n\nCDF Flags (from CDF specification):\n\nBit 0: Majority (1=row-major, 0=column-major)\nBit 1: File format (1=single-file, 0=multi-file)\nBit 2: Checksum used (1=checksum present, 0=no checksum)\nBit 3: MD5 checksum method (requires bit 2=1)\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataFormat.is_big_endian_encoding-Tuple{Any}","page":"Home","title":"CommonDataFormat.is_big_endian_encoding","text":"is_big_endian_encoding(encoding)\n\nDetermine if a CDF encoding uses big-endian byte order based on CDF specification encoding values.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataFormat.is_cdf_v3-Tuple{Any}","page":"Home","title":"CommonDataFormat.is_cdf_v3","text":"is_cdf_v3(magic_bytes)\n\nDetermine if this is a CDF v3 file based on the magic number.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataFormat.is_nrv-Tuple{Any}","page":"Home","title":"CommonDataFormat.is_nrv","text":"Whether or not the variable is a non-record variable\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataFormat.load_attribute_entries-Tuple{Vector{UInt8}, Any, Any, Any}","page":"Home","title":"CommonDataFormat.load_attribute_entries","text":"load_attribute_entries(buffer::Vector{UInt8}, adr, RecordSizeType, cdf_encoding) -> Vector{AttributeEntry}\n\nLoad all attribute entries for a given attribute from its AEDRs.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataFormat.majority_swap!-Union{Tuple{N}, Tuple{T}, Tuple{AbstractArray{T, N}, Any}} where {T, N}","page":"Home","title":"CommonDataFormat.majority_swap!","text":"majority_swap!(data, dims_without_record)\n\nConvert row-major data layout to column-major (Julia's native layout) in-place. For row-major CDF files, this reverses the dimension order (except record dimension).\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataFormat.read_uint32_be-Tuple{IO}","page":"Home","title":"CommonDataFormat.read_uint32_be","text":"read_uint32_be(io::IO)\n\nRead a 32-bit unsigned integer in big-endian byte order. CDF format uses big-endian for record fields.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataFormat.vattrib-Tuple{Any, Any, Any}","page":"Home","title":"CommonDataFormat.vattrib","text":"vattrib(cdf, varnum, name)\n\nOptimized version that loads only the requested attribute for the given variable number. Much faster than loading all attributes when only one is needed.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataFormat.vattrib-Tuple{CDFDataset, Integer}","page":"Home","title":"CommonDataFormat.vattrib","text":"vattrib(cdf::CDFDataset, varnum::Integer)\n\nGet all variable attributes for a specific variable number.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataFormat.@read_be_fields-Tuple{Any, Any, Vararg{Any}}","page":"Home","title":"CommonDataFormat.@read_be_fields","text":"@read_be_fields buffer pos T1 T2 ...\n\nUnrolls sequential big-endian reads starting at pos within buffer. Returns a tuple of the parsed values and the updated position, mirroring read_be_i but without the runtime ntuple/offset bookkeeping.\n\nExample\n\nvalues, next = @read_be_fields buf pos UInt32 Int16\n\n\n\n\n\n","category":"macro"}]
}
